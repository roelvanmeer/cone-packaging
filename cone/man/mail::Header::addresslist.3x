.\"<!-- $Id: book.sgml,v 1.3 2004/05/30 02:43:00 mrsam Exp $ -->
.\"<!-- Copyright 2002-2003 Double Precision, Inc.  See COPYING for -->
.\"<!-- distribution information. -->
.\" This manpage has been automatically generated by docbook2man 
.\" from a DocBook document.  This tool can be found at:
.\" <http://shell.ipoline.com/~elmert/comp/docbook2X/> 
.\" Please send any bug reports, improvements, comments, patches, 
.\" etc. to Steve Cheng <steve@ggi-project.org>.
.TH "mail::Header::addresslist" "3x" "10 April 2006" "" "Creating headers"

.SH NAME
mail::Header::addresslist \- An E-mail header that contains addresses.
.SH SYNOPSIS

.nf
#include <libmail/headers.H>

std::vector<mail::emailAddress> address_list;
mail::emailAddress addr;

mail::Header::addresslist tohdr("To", address_list);

mail::Header::addresslist cchdr("Cc")("John", "john@example.com")
                                     ("Tom", "tom@example.com")
                                     (addr);

std::cout << tohdr.toString();
.fi
.SH "USAGE"
.PP
This class creates a header that contains addresses, such as the
``To:'' or the ``Cc:'' header.
Two arguments are provided to the constructor: the header's name, and
a vector containing the addresses.
.PP
This is not the appropriate class to create structured MIME headers.
Use
\fBmail::Header::mime\fR(3x)
to create structured MIME headers.
.PP
The \fBtoString()\fR returns the header as a single text
string: ``\fIname\fR:
\fIvalue\fR''\&.
Long headers are folded accordingly.
.SS "DYNAMIC ADDRESS LIST GENERATION"
.PP
This class has an alternative constructor that receives a single parameter:
the header's name, which initializes an empty address list.
The address list is populated by repeatedly calling the ``()''
operator.
.PP
One version of the ``()'' operator receives the explicit name and
address components of an E-mail address.
Alternatively, a mail::emailAddress object may be
provided.
.SH "SEE ALSO"
.PP
\fBmail::Header::encoded\fR(3x),
\fBmail::Header::list\fR(3x),
\fBmail::Header::mime\fR(3x),
\fBmail::Header::plain\fR(3x)\&.
