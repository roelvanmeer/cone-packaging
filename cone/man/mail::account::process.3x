.\"<!-- $Id: book.sgml,v 1.4 2007/04/05 02:35:33 mrsam Exp $ -->
.\"<!-- Copyright 2002-2003 Double Precision, Inc.  See COPYING for -->
.\"<!-- distribution information. -->
.\"     Title: mail::account::process
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.72.0 <http://docbook.sf.net/>
.\"      Date: 05/13/2007
.\"    Manual: 


Cone: COnsole Newsreader And Emailer
.\"    Source: 
.\"
.TH "MAIL::ACCOUNT::PROCE" "3x" "05/13/2007" "" "Cone: COnsole Newsreader An"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
mail::account::process \- Process pending events
.SH "SYNOPSIS"
.sp
.RS 4
.nf



#include <libmail/mail.H>


class myCallback : public mail::callback {
public:
    void success(std::string msg);
    void fail(std::string msg);
};
.fi
.RE
.sp
.RS 4
.nf
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>

mail::account::function( \fIparameter list\fR,
                         myCallback &\fIcallback\fR)

for (;;)
{
  std::vector<mail::pollfd> pollfds;
  int timeout;

  timeout=15 * 60 * 60 * 1000;
.fi
.RE
.HP 23
.BI "mail::account::process(" "pollfds" ", " "timeout" ");"
.sp
.RS 4
.nf

  if (myCallback.completed())
      break;

  if (mail::account::poll(pollfds, timeout) < 0 && errno != EINTR)
  {
     error();
  }
}
.fi
.RE
.SH "USAGE"
.PP
This function processes all pending events for all opened mail accounts. Most
mail
requests are not immediately processed (some are, but most aren't). A
mail
request usually includes a
mail::callback\-derived object as one of its arguments. When the mail request completes the
\fBsuccess\fR
or
\fBfail\fR
method (some
mail::callback
subclasses use additional or alternative methods) is invoked. If the mail request cannot be completed immediately,
\fB\fImail::account::function\fR\fR
still returns right away.
\fBmail::account::process\fR
handles any pending events for all outstanding
mail
requests. The
\fBsuccess\fR
or
\fBfail\fR
method will be invoked for all completed requests.
.PP
The
mail::pollfd
structure is a C++ wrapper for the
\(lqstruct pollfd\(rq
that's used by the
\fBpoll\fR(2)
system call.
\fBmail::account::process\fR
receives a reference to a vector of
mail::pollfd
objects. After
\fBmail::account::process\fR
handles any pending events, the function initializes the vector with all open file descriptors on which activity is expected before
\fBmail::account::process\fR
expects any more events to occur.
.PP
Any existing contents of the
mail::pollfd
vector will be destroyed. On the other hand,
\fItimeout\fR
must be initialized prior to invoking
\fBmail::account::process\fR.
\fItimeout\fR
contains a time interval, in milliseconds, before the calling application expects to process any regularly\-scheduled event. If
\fBmail::account::process\fR
expects any regularly\-scheduled event to occur earlier, it will replace
\fItimeout\fR
with the smaller timeout interval.
.PP
The expectation is that the application's main loops alternatively invokes
\fBmail::account::process\fR
and
\fBpoll\fR(2).
\fBpoll\fR(2)
waits for some I/O occur, or a timeout expiring;
\fBmail::account::process\fR
processes any resulting events, then the cycle repeats.
.PP
The application may add its own file descriptors to the
mail::pollfd
vector, before calling
\fBpoll\fR(2). The application is reponsible for handling any I/O activity from its own file descriptors.
.SH "RETURN CODES"
.PP

\fBmail::account::process\fR
always returns succesfully.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
\fBNote\fR
.PP
The application should not invoke
\fBmail::account::process\fR
again until it either invokes
\fBpoll\fR(2)
(directly or via
\fBmail::account::poll\fR(3x)), or until the application calls another



LibMAIL
function.
.SH "SEE ALSO"
.PP

\fBmail::account::open\fR(3x),
\fBmail::account::poll\fR(3x),
\fBmail::account::resume\fR(3x).
