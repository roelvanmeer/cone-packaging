.\"<!-- $Id: book.sgml,v 1.4 2007/04/05 02:35:33 mrsam Exp $ -->
.\"<!-- Copyright 2002-2003 Double Precision, Inc.  See COPYING for -->
.\"<!-- distribution information. -->
'\" t
.\"     Title: mail::folder::addMessage
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.74.3 <http://docbook.sf.net/>
.\"      Date: 10/31/2009
.\"    Manual: Cone: COnsole Newsreader And Emailer
.\"    Source: [FIXME: source]
.\"  Language: English
.\"
.TH "MAIL::FOLDER::ADDMES" "3x" "10/31/2009" "[FIXME: source]" "Cone: COnsole Newsreader And E"
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
mail::folder::addMessage \- Add a message to a folder
.SH "SYNOPSIS"
.sp
.nf



#include <libmail/mail\&.H>


class myCallback : public mail::callback {
public:
    void success(std::string msg);
    void fail(std::string msg);
};
.fi
.sp
.nf
#include <libmail/addmessage\&.H>

mail::folder *folder;
time_t messageDate;
mail::messageInfo newMessageInfo;
std::string messageBody;
.fi
.HP \w'mail::addMessage\ *msg=folder->addMessage('u
.BI "mail::addMessage *msg=folder->addMessage(myCallback\ &" "callback" ");"
.sp
.nf
msg\->messageDate=messageDate;
msg\->messageInfo=messageInfo;
msg\->saveMessageContents(messageBody);

if (changedMyMind)
    msg\->fail(std::string errmsg);
else
    msg\->go();
.fi
.SH "USAGE"
.PP
This method begins the process of manually adding a message to a folder\&. The
\fBmail::folder::addMessage\fR
method returns a pointer to a
mail::addMessage
object\&. The application should then define the contents of the message by invoking the object\'s
\fBsaveMessageContents\fR
method\&. The entire contents of the message does not have to be specified at once\&. A large message may be defined by repeatedly invoking
\fBsaveMessageContents\fR, consecutively, each time specifying the next portion of the message\'s contents\&.
.PP
After the contents of the message are defined by invoking
\fBsaveMessageContents\fR, the application must invoke the
\fBgo\fR
method in order to actually place the new message into the folder\&. The application may abort the process at any time by invoking the
\fBfail\fR
method, and specifying the error message\&.
.PP
The application does not need to explicitly destroy the
mail::addMessage
object, the object is automatically destroyed by
\fBgo\fR
or
\fBfail\fR\&.
.PP
The application may set the following
mail::addMessage
fields prior to invoking
\fBgo\fR\&. If not initialized, the following fields will be set to their default values\&.
.PP
messageDate
.RS 4
The message\'s timestamp, as retrieved by
mail::account::ARRIVALDATE
parameter to
\fBmail::account::readMessageAttributes\fR(3x)()\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
This timestamp does not necessarily have to be the same as the timestamp in the message\'s
Date:
header\&.
.sp .5v
.RE
.RE
.PP
messageInfo
.RS 4
The message flags, as returned by
\fBmail::account::getFolderIndexInfo\fR(3x)()\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
The contents of
\fIuid\fR, the message\'s unique ID, are ignored, only the message flags in
\fImessageInfo\fR
are read\&. The message gets automatically assigned a new unique ID when it gets added to the folder\&.
.sp .5v
.RE
.RE
.SH "MIME-BASED MESSAGE COMPOSITION"
.sp
.if n \{\
.RS 4
.\}
.nf



#include <libmail/mail\&.H>


class myCallback : public mail::callback {
public:
    void success(std::string msg);
    void fail(std::string msg);
};
.fi
.if n \{\
.RE
.\}
.sp
.ft B
.nf
mail::addMessage *msg;
.fi
.ft
.HP \w'msg->assembleContent('u
.BI "msg->assembleContent(size_t\ &" "handleRet" ", const\ mail::Attachment\ &" "attachment" ", mail::callback\ &" "cb" ");"
.HP \w'msg->assembleMessageRfc822('u
.BI "msg->assembleMessageRfc822(size_t\ &" "handleRet" ", std::string\ " "headers" ", size_t\ " "handle" ", mail::callback\ &" "cb" ");"
.HP \w'msg->assembleMultipart('u
.BI "msg->assembleMultipart(size_t\ &" "handleRet" ", std::string\ " "headers" ", const\ std::vector<size_t>\ " "parts" ", std::string\ " "multipart_type" ", const\ mail::mimestruct::parameterList\ &" "options" ", mail::callback\ &" "cb" ");"
.HP \w'bool\ flag=msg->assemble('u
.BI "bool flag=msg->assemble(void);"
.PP
This is an alternative way of adding a message to a folder by assembling it one MIME section at a time\&. First, use the
\fBassembleContent\fR
method to specify the individual content\-containing (non\-multipart
and non\-message/rfc822) MIME sections\&. Before
\fBassembleContent\fR
invokes
\fIcb\fR\'s
\fBsuccess\fR
method it will initialize
\fIhandleRet\fR
with a
\(lqhandle\(rq
that refers to this MIME section\&. Use these MIME section handles to assemble the individual MIME sections into
multipart
and
message/rfc822
MIME sections\&. The
\fBassembleMessageRfc822\fR
and
\fBassembleMultipart\fR
methods also create a new MIME section handle, which refers to the assembled MIME section, in the same way\&. Those handles themselves may also be re\-assembled into higher\-level
multipart
or
message/rfc822
MIME sections\&.
.PP
Finally, after defining the topmost MIME section, use
\fBassemble\fR
to assemble the entire message\&. If
\fBassemble\fR
returns
true, use the
\fBgo\fR
(or the
\fBfail\fR) method\&. If
\fBassemble\fR
returns
false, an
errno\-related error has occured; the application should call
\fBfail\fR
to report it, and clean up the
mail::addMessage
object\&.
.PP
The
\fBassembleContent\fR
method receives a
\fBmail::Attachment\fR(3x)
object\&.
.PP
The second parameter to
\fBassembleMessageRfc822\fR
are the MIME headers of the
message/rfc822
attachment\&. The MIME headers must be terminated by a single newline character, and include the
Content\-Type
header\&. In nearly all situations, this parameter should be set to the fixed string
\(lqContent\-Type: message/rfc822\en\(rq
(note the trailing newline)\&. The third parameter is the handle of the attachment\'s top\-level MIME section\&.
.PP
The second parameter to
\fBassembleMultipart\fR
is a string containing MIME headers for the multipart MIME section\&. These headers should
\fInot\fR
include the
Content\-Type
header\&. The
Content\-Type
header for the multipart section will be generated internally\&. If there are any extra headers, they must have a single trailing newline character\&. Most situations do not need extra headers, so this parameter should be an empty string,
\(lq\(rq\&.
.PP
The third parameter to
\fBassembleMultipart\fR
is the vector of previously\-defined handles of each MIME section that\'s to be assembled into a multipart MIME section\&. The fourth parameter is the actual MIME type of this section, usually
\(lqmultipart/mixed\(rq
or
\(lqmultipart/alternative\(rq
(any
\(lqmultipart\(rq
type is allowed)\&. The fifth parameter is optional, and specifies the MIME content type parameter list (the parameter list should not include the
\(lqboundary\(rq
parameter, because it\'s taken care of automatically by this function)\&.
.PP
The last parameter to
\fBassembleContent\fR,
\fBassembleMessageRfc822\fR, or
\fBassembleMultipart\fR
is the callback object\&. The callback object\'s
\fBsuccess\fR
method will be invoked when the MIME section has been assembled\&. The
\fBfail\fR
method will be invoked if an error occured\&. Depending on the type of the folder the message is being added to, the MIME section may be assembled immediately (in which case
\fBsuccess\fR
or
\fBfail\fR
gets called right before the function terminates) or the function will terminate immediately, and the callback function will be called at a later time\&.
.SS "COPYING ATTACHMENTS FROM OTHER MESSAGES"
.sp
.ft B
.nf
mail::addMessage *msg;
.fi
.ft
.HP \w'msg->assembleImportAttachment('u
.BI "msg->assembleImportAttachment(size_t\ &" "handleRet" ", mail::account\ *" "acct" ", std::string\ " "uid" ", const\ mail::mimestruct\ &" "attachment" ", mail::callback\ &" "cb" ");"
.HP \w'msg->assembleRemoveAttachmentsFrom('u
.BI "msg->assembleRemoveAttachmentsFrom(size_t\ &" "handleRet" ", mail::account\ *" "acct" ", std::string\ " "uid" ", const\ mail::mimestruct\ &" "attachment" ", const\ std::set\ &" "mimeIdList" ", mail::callback\ &" "cb" ");"
.PP
The
\fBassembleImportAttachment\fR
function assembles a new MIME section by copying an existing MIME section from another message\&.
\fIacct\fR
specifies an open mail account, with an open mail folder\&.
\fIuid\fR
specifies the unique identifier of a message in
\fIacct\fR\'s open folder, which can be obtained from
\fBmail::account::getFolderIndexInfo\fR(3x)\&.
\fIattachment\fR
specifies which attachment in message
\fIuid\fR
should be copied\&.
\fIattachment\fR
must be obtained using
mail::account::MIMESTRUCTURE
with
\fBmail::account::readMessageAttributes\fR(3x)\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP

\fIacct\fR
can refer to any open mail account or folder, and does not have to be the same folder the message is being added to!
.sp .5v
.RE
.PP

\fIattachment\fR
may refer to a multipart, or a non\-multipart MIME section\&. An
\fIattachment\fR
referring to a multipart MIME section imports the entire multipart MIME section, and all subsections it contains\&.
\fBassembleRemoveAttachmentsFrom\fR
also copies the entire multipart MIME section, but skips selected MIME subsections\&. Any subsection appearing in
\fImimeIdList\fR
is not copied\&.
\fImimeIdList\fR
is a list of MIME section identifiers, obtained from
\fBmail::mimestruct\fR(3x)\'s
\fImime_id\fR
field\&.
.PP

\fBassembleRemoveAttachmentsFrom\fR
implements the
\(lqRemove Attachments\(rq
function in a typical mail client, which removes individual attachments from a message\&. To do that, set
\fIattachment\fR
to the top\-level MIME section that refers to the entire message (literally the same object returned by
\fBmail::account::readMessageAttributes\fR(3x)) and specify the attachments to remove in
\fImimeIdList\fR\&. Use
\fBmail::folder::addMessage\fR(3x)
to add the message to the same folder as the original message (this must be done before invoking
\fBassembleRemoveAttachmentsFrom\fR, of course), then when that\'s done remove the original message\&.
.SH "RETURN CODES AND CALLBACKS"
.PP

\fBmail::addMessage::fail\fR
automatically invokes the callback object\'s
\fBfail\fR
method, prior to returning\&.
\fBmail::addMessage::go\fR
automatically invokes the callback object\'s
\fBsuccess\fR
method, when the message is added\&.
\fBmail::addMessage::go\fR
will invoke
\fBfail\fR
if the message cannot be added to the folder, for some reason\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
The
\fBmail::folder::addMessage\fR
function returns a NULL pointer if the
mail::addMessage
object cannot be created\&. This does not necessarily indicate an out\-of\-memory condition\&. It is not possible to manually add messages to some types of folders\&. For example, messages cannot be manually added to POP3 folders, since this is not supported by the POP3 protocol\&.
.PP
The callback object\'s
\fBfail\fR
method gets invoked just prior to this function returning NULL, in these kinds of situations\&.
.sp .5v
.RE
.PP
The application must wait until
\fIcallback\fR\'s
\fBsuccess\fR
or
\fBfail\fR
method is invoked\&. The
\fBsuccess\fR
method is invoked when this request is succesfully processed\&. The
\fBfail\fR
method is invoked if this request cannot be processed\&. The application must not destroy
\fIcallback\fR
until either the
\fBsuccess\fR
or
\fBfail\fR
method is invoked\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP

\fIcallback\fR\'s
\fBfail\fR
method may be invoked even after other callback methods were invoked\&. This indicates that the request was partially completed before the error was encountered\&.
.sp .5v
.RE
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP

\fIfolder\fR
does not necessarily have to be a
mail::folder
object that refers to the currently open folder\&. Any
mail::folder
object from an active
mail::account
object may be used\&.
.sp .5v
.RE
.SH "SEE ALSO"
.PP

\fBmail::account::getFolderIndexInfo\fR(3x)(),
\fBmail::account::readMessageAttributes\fR(3x)()\&.
